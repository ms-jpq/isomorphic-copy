#!/usr/bin/env python3

from asyncio import gather, get_event_loop
from asyncio.subprocess import create_subprocess_exec, DEVNULL, PIPE, Process
from os import chmod, environ, getcwd, makedirs, unlink
from os.path import basename, dirname, isfile, join, relpath
from shutil import which
from socket import AF_UNIX, SOCK_STREAM, socket
from socketserver import BaseRequestHandler, UnixStreamServer
from sys import argv, stderr, stdin, stdout
from time import sleep
from typing import List, Tuple


#################### ########### ####################
#################### INIT Region ####################
#################### ########### ####################


__name__ = basename(argv[1])
__args__ = argv[2:]
__local_write__ = environ.get("ISOCP_USE_FILE") is not None
__dir__ = dirname(__file__)
__bin__ = join(__dir__, "bin")
__tmp__ = join(__dir__, "tmp")
__socket_path__ = join(__tmp__, "cp.socket")
__write_path__ = join(__tmp__, "clipboard.txt")


def path_mask() -> None:
  paths = (path
           for path in environ["PATH"].split(":")
           if path != __bin__)
  environ["PATH"] = ":".join(paths)


class ProcErr(BaseException):
  def __init__(self, message: str):
    self.message = message


async def call(prog: str, *args: List[str], input: bytes = None) -> None:
  proc: Process = await create_subprocess_exec(
      prog, *args, stdin=PIPE, stderr=PIPE)
  _, stderr = await proc.communicate(input)
  if proc.returncode != 0:
    raise ProcErr(stderr.decode())


#################### ########### ####################
#################### Copy Region ####################
#################### ########### ####################


def local_copy(data: bytes) -> None:
  with open(__write_path__, "wb") as fd:
    fd.write(data)


async def cp(data: bytes) -> None:
  tasks = []
  if environ.get("TMUX"):
    task = call("tmux", "load-buffer", "-", input=data)
    tasks.append(task)

  if which("pbcopy"):
    task = call("pbcopy", input=data)
    tasks.append(task)

  elif environ.get("WAYLAND_DISPLAY") and which("wl-copy"):
    task = call("wl-copy", input=data)
    tasks.append(task)

  elif environ.get("DISPLAY") and which("xclip"):
    task = call("xclip", input=data)
    tasks.append(task)

  elif __local_write__:
    local_copy(data)

  await gather(*tasks)


def rcp(data: bytes) -> None:
  with socket(AF_UNIX, SOCK_STREAM) as sock:
    try:
      sock.connect(__socket_path__)
      sock.sendall(data)
      sock.sendall(b'\0\n')
    except OSError:
      pass


def is_remote() -> bool:
  if environ.get("SSH_TTY"):
    return True
  elif isfile("/.dockerenv"):
    return True
  else:
    return False


async def cp_data(data: bytes) -> None:
  task = cp(data)
  if is_remote():
    rcp(data)
  await task


async def copy() -> None:
  data: bytes = stdin.read().strip("\n").encode()
  await cp_data(data)


#################### ############ ####################
#################### Paste Region ####################
#################### ############ ####################


def local_paste() -> None:
  try:
    with open(__write_path__, "r") as fd:
      print(fd.read())
  except OSError:
    pass


async def paste() -> None:
  if which("pbpaste"):
    await call("pbpaste")

  elif environ.get("WAYLAND_DISPLAY") and which("wl-paste"):
    await call("wl-paste")

  elif environ.get("DISPLAY") and which("xclip"):
    await call("xclip", "-out")

  elif environ.get("TMUX"):
    await call("tmux", "save-buffer", "-")

  elif __local_write__:
    local_paste()

  else:
    print("⚠️ No system clipboard detected ⚠️", file=stderr)
    exit(1)


#################### ########### ####################
#################### CSSH Region ####################
#################### ########### ####################


def cssh_cmd() -> Tuple[List[str], List[str]]:
  lookup = {"cssh": (["ssh"], []),
            "cdocker": (["docker", "exec"], [])}
  return lookup[__name__]


def cssh_prog() -> str:
  home = environ["HOME"]
  canonical = join(__bin__, "csshd")

  if canonical.startswith(home):
    prog = relpath(canonical, home)
    return f"$HOME/{prog}"
  else:
    return canonical


def cssh_run(args: List[str]) -> None:
  prev, post = cssh_cmd()
  prog = cssh_prog()
  exe = [*prev, *args, *post, "sh", "-c", f'"{prog}"']
  process: Popen = Popen(exe, stdout=PIPE, stderr=PIPE)
  buf = bytearray()

  while True:
    code = process.poll()
    if code:
      print(f"{' '.join(exe)}\ndaemon exited - {code}", file=stderr)
      print(process.stderr.read().decode(), file=stderr)
      return

    line: bytes = process.stdout.readline()
    for b in line:
      if b == 0:
        try:
          cp_data(buf)
        except ProcErr:
          pass
        buf.clear()
        break
      else:
        buf.append(b)


def cssh() -> None:
  while True:
    cssh_run(__args__)
    sleep(1)
    print("\a")


#################### ############ ####################
#################### CSSHD Region ####################
#################### ############ ####################


def ready_socket(path: str) -> None:
  try:
    unlink(path)
  except IOError:
    pass


def csshd() -> None:
  class Handler(BaseRequestHandler):
    def handle(self) -> None:
      with self.request.makefile() as fd:
        data: str = fd.read()
        stdout.write(data)
        stdout.flush()

  ready_socket(__socket_path__)
  with UnixStreamServer(__socket_path__, Handler) as srv:
    srv.serve_forever()


#################### ########### ####################
#################### Main Region ####################
#################### ########### ####################


def is_copy() -> bool:
  if __name__ in {"c", "pbcopy", "wl-copy"}:
    return True
  elif __name__ == "xclip" and set(__args__).isdisjoint({"-o", "-out"}):
    return True
  else:
    return False


def is_paste() -> bool:
  if __name__ in {"p", "pbpaste", "wl-paste"}:
    return True
  elif __name__ == "xclip" and not set(__args__).isdisjoint({"-o", "-out"}):
    return True
  else:
    return False


async def main() -> None:
  path_mask()

  if __name__ in {"cssh", "cdocker"}:
    cssh()
  elif __name__ == "csshd":
    csshd()
  elif is_paste():
    await paste()
  elif is_copy():
    await copy()
  else:
    print(f"Unknown -- {__name__} {' '.join(__args__)}", file=stderr)
    exit(1)


try:
  loop = get_event_loop()
  loop.run_until_complete(main())
except KeyboardInterrupt:
  pass
finally:
  loop.close()
