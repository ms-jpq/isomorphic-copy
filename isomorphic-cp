#!/usr/bin/env python3

from asyncio import (
    IncompleteReadError,
    StreamReader,
    StreamWriter,
    gather,
    get_event_loop,
    open_unix_connection,
    sleep,
    start_unix_server,
)
from asyncio.events import AbstractServer
from asyncio.subprocess import DEVNULL, PIPE, Process, create_subprocess_exec
from datetime import datetime
from os import environ
from os.path import basename, dirname, isfile, join, relpath
from pathlib import Path
from shutil import which
from sys import argv, stderr, stdin
from typing import Dict, List, Optional, Tuple, cast

#################### ########### ####################
#################### INIT Region ####################
#################### ########### ####################


__name__ = basename(argv[1])
__args__ = argv[2:]
__local_write__ = environ.get("ISOCP_USE_FILE") is not None
__dir__ = dirname(__file__)
__bin__ = join(__dir__, "bin")
__tmp__ = join(__dir__, "tmp")
__socket_path__ = join(__tmp__, "cp.socket")
__write_path__ = join(__tmp__, "clipboard.txt")


def path_mask() -> None:
    paths = (path for path in environ["PATH"].split(":") if path != __bin__)
    environ["PATH"] = ":".join(paths)


async def call(prog: str, *args: str, input: bytes = None) -> None:
    proc: Process = await create_subprocess_exec(prog, *args, stdin=PIPE)
    await proc.communicate(input)
    if proc.returncode != 0:
        exit(proc.returncode)


#################### ########### ####################
#################### Copy Region ####################
#################### ########### ####################


def local_copy(data: bytes) -> None:
    with open(__write_path__, "wb") as fd:
        fd.write(data)


def is_remote() -> bool:
    if environ.get("SSH_TTY"):
        return True
    elif isfile(join("/", ".dockerenv")):
        return True
    else:
        return False


async def rcp(data: bytes) -> None:
    try:
        conn = await open_unix_connection(__socket_path__)
    except (FileNotFoundError, ConnectionRefusedError):
        pass
    else:
        _, writer = conn
        writer.write(data)
        writer.write(b"\0")
        await writer.drain()


async def copy(text: Optional[bytes] = None) -> None:
    data: bytes = text or stdin.read().strip("\n").encode()
    tasks = []

    if is_remote():
        tasks.append(rcp(data))

    if environ.get("TMUX"):
        tasks.append(call("tmux", "load-buffer", "-", input=data))

    if which("pbcopy"):
        tasks.append(call("pbcopy", input=data))

    elif environ.get("WAYLAND_DISPLAY") and which("wl-copy"):
        tasks.append(call("wl-copy", input=data))

    elif environ.get("DISPLAY") and which("xclip"):
        tasks.append(call("xclip", *__args__, "-selection", "clipboard", input=data))
        tasks.append(call("xclip", *__args__, "-selection", "primary", input=data))

    elif __local_write__:
        local_copy(data)

    await gather(*tasks)


#################### ############ ####################
#################### Paste Region ####################
#################### ############ ####################


def local_paste() -> None:
    try:
        with open(__write_path__, "r") as fd:
            print(fd.read(), end="", flush=True)
    except OSError:
        pass


async def paste() -> None:
    if which("pbpaste"):
        await call("pbpaste")

    elif environ.get("WAYLAND_DISPLAY") and which("wl-paste"):
        await call("wl-paste")

    elif environ.get("DISPLAY") and which("xclip"):
        args = (
            (*__args__, "-out")
            if set(__args__).isdisjoint({"-o", "-out"})
            else __args__
        )
        await call("xclip", *args, "-selection", "clipboard")
        # await call("xclip", *args, "-selection", "primary")

    elif environ.get("TMUX"):
        await call("tmux", "save-buffer", "-")

    elif __local_write__:
        local_paste()

    else:
        print(
            "⚠️ No system clipboard detected ⚠️\n\nexport ISOCP_USE_FILE=1 to use temp file",
            file=stderr,
        )
        exit(1)


#################### ########### ####################
#################### CSSH Region ####################
#################### ########### ####################


def cssh_cmd() -> Tuple[List[str], List[str]]:
    lookup: Dict[str, Tuple[List[str], List[str]]] = {
        "cssh": (["ssh"], []),
        "cdocker": (["docker", "exec"], []),
    }
    return lookup[__name__]


def cssh_prog() -> str:
    home = str(Path.home())
    canonical = join(__bin__, "csshd")

    if canonical.startswith(home):
        prog = relpath(canonical, home)
        return f"$HOME/{prog}"
    else:
        return canonical


async def cssh_run(args: List[str]) -> None:
    prev, post = cssh_cmd()
    prog = cssh_prog()
    exe = [*prev, *args, *post, "sh", "-c", prog]
    proc: Process = await create_subprocess_exec(*exe, stdin=DEVNULL, stdout=PIPE)
    stdout = cast(StreamReader, proc.stdout)

    print(f"Communicating via:\n{' '.join(exe)}")
    while True:
        code = proc.returncode
        if code:
            print(f"daemon exited - {code}", file=stderr)
            break
        else:
            try:
                data: bytes = await stdout.readuntil(b"\0")
            except IncompleteReadError:
                break
            else:
                time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                print(f"\n-- RECV -- {time}\n")
                await copy(data[:-1])


async def cssh() -> None:
    while True:
        await cssh_run(__args__)
        print("\a", end="")
        await sleep(1)


#################### ############ ####################
#################### CSSHD Region ####################
#################### ############ ####################


async def csshd() -> None:
    async def handler(reader: StreamReader, _: StreamWriter) -> None:
        data: bytes = await reader.readuntil(b"\0")
        print(data.decode(), end="", flush=True)

    server: AbstractServer = await start_unix_server(handler, __socket_path__)
    await server.wait_closed()


#################### ########### ####################
#################### Main Region ####################
#################### ########### ####################


def is_copy() -> bool:
    if __name__ in {"c", "pbcopy", "wl-copy"}:
        return True
    elif __name__ == "xclip" and set(__args__).isdisjoint({"-o", "-out"}):
        return True
    else:
        return False


def is_paste() -> bool:
    if __name__ in {"p", "pbpaste", "wl-paste"}:
        return True
    elif __name__ == "xclip" and not set(__args__).isdisjoint({"-o", "-out"}):
        return True
    else:
        return False


async def main() -> None:
    path_mask()

    if __name__ in {"cssh", "cdocker"}:
        await cssh()
    elif __name__ == "csshd":
        await csshd()
    elif is_paste():
        await paste()
    elif is_copy():
        await copy()
    else:
        print(f"Unknown -- {__name__} {' '.join(__args__)}", file=stderr)
        exit(1)


try:
    loop = get_event_loop()
    loop.run_until_complete(main())
except KeyboardInterrupt:
    exit(130)
finally:
    loop.close()
