#!/usr/bin/env python3

from asyncio import (StreamReader, StreamWriter, gather, get_event_loop,
                     open_unix_connection, sleep, start_unix_server)
from asyncio.subprocess import DEVNULL, PIPE, Process, create_subprocess_exec
from os import chmod, environ, getcwd, makedirs, unlink
from os.path import basename, dirname, isfile, join, relpath
from pathlib import Path
from shutil import which
from sys import argv, stderr, stdin, stdout
from typing import List, Tuple


#################### ########### ####################
#################### INIT Region ####################
#################### ########### ####################


__name__ = basename(argv[1])
__args__ = argv[2:]
__local_write__ = environ.get("ISOCP_USE_FILE") is not None
__dir__ = dirname(__file__)
__bin__ = join(__dir__, "bin")
__tmp__ = join(__dir__, "tmp")
__socket_path__ = join(__tmp__, "cp.socket")
__write_path__ = join(__tmp__, "clipboard.txt")


def path_mask() -> None:
  paths = (path
           for path in environ["PATH"].split(":")
           if path != __bin__)
  environ["PATH"] = ":".join(paths)


async def call(prog: str, *args: List[str], input: bytes = None) -> None:
  proc: Process = await create_subprocess_exec(
      prog, *args, stdin=PIPE)
  await proc.communicate(input)
  if proc.returncode != 0:
    exit(proc.returncode)


#################### ########### ####################
#################### Copy Region ####################
#################### ########### ####################


def local_copy(data: bytes) -> None:
  with open(__write_path__, "wb") as fd:
    fd.write(data)


async def cp(data: bytes) -> None:
  tasks = []
  if environ.get("TMUX"):
    tasks.append(call("tmux", "load-buffer", "-", input=data))

  if which("pbcopy"):
    tasks.append(call("pbcopy", input=data))

  elif environ.get("WAYLAND_DISPLAY") and which("wl-copy"):
    tasks.append(call("wl-copy", input=data))

  elif environ.get("DISPLAY") and which("xclip"):
    tasks.append(call("xclip", input=data))

  elif __local_write__:
    local_copy(data)

  await gather(*tasks)


async def rcp(data: bytes) -> None:
  _, writer = await open_unix_connection(__socket_path__)
  writer.write(data)
  writer.write(b'\0')
  await writer.drain()


def is_remote() -> bool:
  if environ.get("SSH_TTY"):
    return True
  elif isfile("/.dockerenv"):
    return True
  else:
    return False


async def cp_data(data: bytes) -> None:
  tasks = []
  tasks.append(cp(data))
  if is_remote():
    tasks.append(rcp(data))
  await gather(*tasks)


async def copy() -> None:
  data: bytes = stdin.read().strip("\n").encode()
  await cp_data(data)


#################### ############ ####################
#################### Paste Region ####################
#################### ############ ####################


def local_paste() -> None:
  try:
    with open(__write_path__, "r") as fd:
      print(fd.read(), end="")
  except OSError:
    pass


async def paste() -> None:
  if which("pbpaste"):
    await call("pbpaste")

  elif environ.get("WAYLAND_DISPLAY") and which("wl-paste"):
    await call("wl-paste")

  elif environ.get("DISPLAY") and which("xclip"):
    await call("xclip", "-out")

  elif environ.get("TMUX"):
    await call("tmux", "save-buffer", "-")

  elif __local_write__:
    local_paste()

  else:
    print("⚠️ No system clipboard detected ⚠️", file=stderr)
    exit(1)


#################### ########### ####################
#################### CSSH Region ####################
#################### ########### ####################


def cssh_cmd() -> Tuple[List[str], List[str]]:
  lookup = {"cssh": (["ssh"], []),
            "cdocker": (["docker", "exec"], [])}
  return lookup[__name__]


def cssh_prog() -> str:
  home = str(Path.home())
  canonical = join(__bin__, "csshd")

  if canonical.startswith(home):
    prog = relpath(canonical, home)
    return f"$HOME/{prog}"
  else:
    return canonical


async def cssh_run(args: List[str]) -> None:
  prev, post = cssh_cmd()
  prog = cssh_prog()
  exe = [*prev, *args, *post, "sh", "-c", prog]
  proc: Process = await create_subprocess_exec(
      *exe, stdin=DEVNULL, stdout=PIPE, stderr=PIPE)

  while True:
    code = proc.returncode
    if code:
      err = proc.stderr.read().decode()
      print(f"{' '.join(exe)}\ndaemon exited - {code}", file=stderr)
      print(err, file=stderr)
      return

      data: bytes = await proc.stdout.readuntil(b'\0')
      await cp_data(data[:-1])


async def cssh() -> None:
  while True:
    await cssh_run(__args__)
    print("\a")
    await sleep(1)


#################### ############ ####################
#################### CSSHD Region ####################
#################### ############ ####################


def ready_socket(path: str) -> None:
  try:
    unlink(path)
  except IOError:
    pass


def csshd() -> None:
  async def callback(reader: StreamReader, _: StreamWriter) -> None:
    data: bytes = await reader.read()
    print(data.decode(), end="", flush=True)
  start_unix_server(callback, __socket_path__)


#################### ########### ####################
#################### Main Region ####################
#################### ########### ####################


def is_copy() -> bool:
  if __name__ in {"c", "pbcopy", "wl-copy"}:
    return True
  elif __name__ == "xclip" and set(__args__).isdisjoint({"-o", "-out"}):
    return True
  else:
    return False


def is_paste() -> bool:
  if __name__ in {"p", "pbpaste", "wl-paste"}:
    return True
  elif __name__ == "xclip" and not set(__args__).isdisjoint({"-o", "-out"}):
    return True
  else:
    return False


async def main() -> None:
  path_mask()

  if __name__ in {"cssh", "cdocker"}:
    await cssh()
  elif __name__ == "csshd":
    csshd()
  elif is_paste():
    await paste()
  elif is_copy():
    await copy()
  else:
    print(f"Unknown -- {__name__} {' '.join(__args__)}", file=stderr)
    exit(1)


try:
  loop = get_event_loop()
  loop.run_until_complete(main())
except KeyboardInterrupt:
  exit(130)
finally:
  loop.close()
